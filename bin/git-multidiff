#!/usr/bin/env python

import commands
import os
import shutil
import subprocess
import sys
import tempfile

"""
Like git-difftool, but executes all diffs in parallel.
"""

def main(argv):
  try:
    tool = subprocess.check_output(['git', 'config', '--get', 'multidiff.tool']).strip()
  except subprocess.CalledProcessError as exc:
    print >>sys.stderr, \
        'Error: %r returned status %r' % (' '.join(exc.cmd), exc.returncode)
    sys.exit(1)

  tmpdir = tempfile.mkdtemp()
  try:
    os.environ['GIT_MULTIDIFF_TEMP'] = tmpdir
    argsfile = os.path.join(tmpdir, 'args')
    open(argsfile, 'w').close()
    subprocess.check_call(['git', 'difftool', '-y', '-x',
        '_git-multidiff-helper'] + argv[1:])
    difftool_args = [x for x in
        open(argsfile).read().split('\0')
        if x]
    assert not (len(difftool_args) % 2), \
        "Expected even number of files, but got %d" % len(difftool_args)
    # TODO: move chmod stuff here, check that link count == 1 and in tmpdir.

    if difftool_args:
      # Instead of using `subprocess.check_call([tool] + difftool_args)`
      # we use os.system. This makes it possible for the tool to contain
      # flags (or potentially other stuff evaluated by the shell).
      os.system(tool + ''.join(commands.mkarg(x) for x in difftool_args))
  finally:
    shutil.rmtree(tmpdir, ignore_errors=True)

if __name__ == '__main__':
  main(sys.argv)
