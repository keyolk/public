#!/usr/bin/env python

import sys
import subprocess

"""
Like git-difftool, but executes all diffs in parallel.

TODO:
- run git diff only once instead of n+1 times. The current setup is
  flakey when moves/renames happen and -M is passed.
- parameterize multi-diff tool
"""

def cmd_lines(*args, **kwargs):
  """
  Calls subprocess.check_output, but returns result as a list of lines,
  with trailing newlines removed. A newline at the end of the file is
  also ignored.
  """
  output = subprocess.check_output(*args, **kwargs).split('\n')
  # deal with trailing newline
  if not output[-1]:
    del output[-1]
  return output

# git diff --name-only "$@" | while read filename; do
#     git difftool "$@" --no-prompt "$filename" &
def main(argv):
  diff_fnams = cmd_lines(['git', 'diff', '--name-only'] + argv[1:])
  children = []
  pairs = []
  for fnam in diff_fnams:
    child = subprocess.Popen(
        ['git', 'difftool'] + argv[1:] + ['--no-prompt', '-x', 'echo-and-hang', '--', fnam],
        bufsize=1,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE)
    pairs.append(child.stdout.readline()[:-1].split('\000'))
    children.append(child)

  args = []
  for old, new in pairs:
    args.extend((old, new))
#  status = subprocess.call(
#      ['mvim', '-f', '+set lines=999 columns=999', '-o']
#      + args
#      + ['+silent call TabMultiDiff()'])
  status = subprocess.call(
      ['mvim', '-f', '-c', 'silent call TabMultiDiffMaximized()']
      + args)

  # Terminate children gracefully...
  for child in children:
    child.stdin.write('\n')
    child.stdin.flush()
    child.wait()

if __name__ == '__main__':
  main(sys.argv)
